#
# This Workflow Template is used to promote your CD pipeline. It will apply to every pipeline used
#

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: cd-promote
spec:
  entrypoint: deploy-and-promote
  onExit: workflow-handler

  podGC:
    # Pod GC strategy must be one of the following:
    # * OnPodCompletion - delete pods immediately when pod is completed (including errors/failures)
    # * OnPodSuccess - delete pods immediately when pod is successful
    # * OnWorkflowCompletion - delete pods when workflow is completed
    # * OnWorkflowCompletion - delete pods when workflow is successful
    strategy: OnWorkflowCompletion

  templates:
    - name: deploy-and-promote
      inputs:
        parameters:
          - name: ARGOCD_APP
          - name: ARGOCD_SERVER
            default: argocd-server
          - name: REPO
          - name: REVISION
            value: 'main'
          - name: GIT_TOKEN_SECRET
          - name: PROMOTION_TYPE
          - name: TENANT_NAME
          - name: ENVIRONMENT
            value: "dev"
          - name: PROMOTE_TO
            value: 'nil'
          - name: COMMAND_OPTS
            default: ''
      dag:
        # Sync and wait
        tasks:
          # Do the argocd deployment
          - name: argocd-sync
            templateRef:
              name: argocd-deploy-ops
              template: sync
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
            when: "{{ inputs.parameters.ENVIRONMENT }} != 'nil'"

          # Get the deployment status
          - name: argocd-status-check
            templateRef:
              name: argocd-deploy-ops
              template: app-status
            depends: argocd-sync
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
            when: "{{ inputs.parameters.ENVIRONMENT }} != 'nil'"

          # Wait fpr the process to finish if needed
          - name: argocd-wait
            templateRef:
              name: argocd-deploy-ops
              template: wait
            depends: argocd-status-check
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--health --timeout 900 --insecure" # Wait for progress ops to finish
            when: >-
                ( '{{ inputs.parameters.ENVIRONMENT }}' != 'nil' ) &&
                ( '{{ tasks.argocd-status-check.outputs.parameters.health }}' == 'Progressing' )

          # Get the deployment status
          - name: argocd-final-status-check
            templateRef:
              name: argocd-deploy-ops
              template: app-status
            depends: argocd-wait
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
            when: "{{ inputs.parameters.ENVIRONMENT }} != 'nil'"

          # Check the deployment status - if !="healthy" then bomb out
          - name: health-deployment-gate
            template: deployment-error
            depends: argocd-final-status-check
            arguments:
              parameters:
              - name: ARGOCD_APP
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: ARGOCD_SERVER
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: APP_HEALTH
                value: "{{tasks.argocd-final-status-check.outputs.parameters.health}}"
              - name: ENVIRONMENT
                value: "{{inputs.parameters.ENVIRONMENT}}"
              - name: COMMAND_OPTS
                value: "{{inputs.parameters.COMMAND_OPTS}}"
            when: >-
                ( '{{ inputs.parameters.ENVIRONMENT }}' != 'nil' ) &&
                ( '{{ tasks.argocd-final-status-check.outputs.parameters.health }}' == 'Degraded' )

          # Get the deployment history
          - name: app-history
            templateRef:
              name: argocd-deploy-ops
              template: history
            depends: health-deployment-gate
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
            when: "{{ inputs.parameters.ENVIRONMENT }} != 'nil'"

          - name: update-tag
            templateRef:
              name: git-ops
              template: update-image-tag
            depends: app-history
            arguments:
              parameters:
              - name: REPO
                value: "{{inputs.parameters.REPO}}"
              - name: REVISION
                value: "{{inputs.parameters.REVISION}}"
              - name: GIT_TOKEN_SECRET
                value: "{{inputs.parameters.GIT_TOKEN_SECRET}}"
              - name: PROMOTION_TYPE
                value: "{{inputs.parameters.PROMOTION_TYPE}}"
              - name: TENANT_NAME
                value: "{{inputs.parameters.TENANT_NAME}}"
              - name: ENVIRONMENT
                value: "{{inputs.parameters.ENVIRONMENT}}"
              - name: PROMOTE_TO
                value: "{{inputs.parameters.PROMOTE_TO}}"
              - name: COMMAND_OPTS
                value: "{{inputs.parameters.COMMAND_OPTS}}"
              - name: CONTROLLED_ENVS   # Controlled environments are ones requiring manual approval. This can be a CSV list
                value: "sit"
              when: "{{ inputs.parameters.PROMOTE_TO }} != 'nil'"

###################################################################################
#
# Localised template definitions...
#
###################################################################################

#
# This template is for deployment errors
#

    - name: deployment-error
      inputs:
        parameters:
          - name: ARGOCD_APP
          - name: ARGOCD_SERVER
          - name: APP_HEALTH
          - name: ENVIRONMENT
          - name: COMMAND_OPTS
      dag:
        # Sync and wait
        tasks:
          - name: deployment-rollback
            templateRef:
              name: argocd-deploy-ops
              template: rollback
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
          - name: health-check
            templateRef:
              name: argocd-deploy-ops
              template: app-status
            depends: deployment-rollback
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
          - name: deployment-terminate
            templateRef:
              name: argocd-deploy-ops
              template: delete-app
            depends: health-check
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
            when: >-
              (( '{{ tasks.deployment-rollback.outputs.parameters.terminate }}' == 'true' )
               ||
               ( '{{inputs.parameters.COMMAND_OPTS}}' =~ '--terminate' )
               ||
               ( '{{ tasks.health-check.outputs.parameters.health }}' != 'Healthy' ))
              &&
              ( '{{inputs.parameters.ENVIRONMENT}}' == 'sit' )
          - name: deployment-history
            templateRef:
              name: argocd-deploy-ops
              template: history
            depends: deployment-terminate
            arguments:
              parameters:
              - name: app
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: serverUrl
                value: "{{inputs.parameters.ARGOCD_SERVER}}"
              - name: flags
                value: "--insecure"
          - name: deployment-error
            template: deployment-error-handler
            depends: deployment-history
            arguments:
              parameters:
              - name: ARGOCD_APP
                value: "{{inputs.parameters.ARGOCD_APP}}"
              - name: APP_HEALTH
                value: "{{ tasks.health-check.outputs.parameters.health }}"

    - name: deployment-error-handler
      inputs:
        parameters:
          - name: ARGOCD_APP
          - name: APP_HEALTH
      script:
        image: ghcr.io/account/gitopsaccount/cd-promote:latest
        command: [ bash ]
        source: |
          echo "================================================="
          echo "Error: The deployed app is in a non-healthy state"
          echo "{{inputs.parameters.ARGOCD_APP}} is \"{{inputs.parameters.APP_HEALTH}}\""
          echo "================================================="
          exit 1

#
# This template is for running tests
#
    - name: run-tests
      inputs:
        parameters:
          - name: ENVIRONMENT
          - name: GIT_TOKEN_SECRET
          - name: GIT_TEST_REPO
          - name: TEST_TOKEN
          - name: COMMAND_OPTS
      steps:
      - - name: run-dev-tests
          templateRef:
            name: test-ops
            template: all-tests
          arguments:
            parameters:
            - name: ENVIRONMENT
              value: "{{inputs.parameters.ENVIRONMENT}}"
            - name: GIT_TOKEN_SECRET
              value: "{{inputs.parameters.GIT_TOKEN_SECRET}}"
            - name: GIT_TEST_REPO
              value: "{{inputs.parameters.GIT_TEST_REPO}}"
            - name: TEST_TOKEN
              value: "{{inputs.parameters.TEST_TOKEN}}"
            - name: COMMAND_OPTS
              value: "{{inputs.parameters.COMMAND_OPTS}}"
          when: >-
              ( '{{ inputs.parameters.ENVIRONMENT }}' == 'nil' ) ||
              ( '{{ inputs.parameters.ENVIRONMENT }}' == 'dev' )
        - name: run-qa-tests
          templateRef:
            name: test-ops
            template: all-tests
          arguments:
            parameters:
            - name: ENVIRONMENT
              value: "{{inputs.parameters.ENVIRONMENT}}"
            - name: GIT_TOKEN_SECRET
              value: "{{inputs.parameters.GIT_TOKEN_SECRET}}"
            - name: GIT_TEST_REPO
              value: "{{inputs.parameters.GIT_TEST_REPO}}"
            - name: TEST_TOKEN
              value: "{{inputs.parameters.TEST_TOKEN}}"
            - name: COMMAND_OPTS
              value: "{{inputs.parameters.COMMAND_OPTS}}"
          when: "{{ inputs.parameters.ENVIRONMENT }} == 'qa'"
        - name: run-sit-tests
          templateRef:
            name: test-ops
            template: all-tests
          arguments:
            parameters:
            - name: ENVIRONMENT
              value: "{{inputs.parameters.ENVIRONMENT}}"
            - name: GIT_TOKEN_SECRET
              value: "{{inputs.parameters.GIT_TOKEN_SECRET}}"
            - name: GIT_TEST_REPO
              value: "{{inputs.parameters.GIT_TEST_REPO}}"
            - name: TEST_TOKEN
              value: "{{inputs.parameters.TEST_TOKEN}}"
            - name: COMMAND_OPTS
              value: "{{inputs.parameters.COMMAND_OPTS}}"
          when: "{{ inputs.parameters.ENVIRONMENT }} == 'sit'"


#
# Exit handler related templates
# After the completion of the entrypoint template, the status of the
# workflow is made available in the global variable {{workflow.status}}.
# {{workflow.status}} will be one of: Succeeded, Failed, Error
#
    - name: workflow-handler
      steps:
      - - name: wfh-success
          template: workflow-success
          when: "{{workflow.status}} == Succeeded"
        - name: wfh-fail
          template: workflow-fail
          when: "{{workflow.status}} == Failed"
        - name: wfh-error
          template: workflow-error
          when: "{{workflow.status}} == Error"
 
    # This template is a default handler for successful builds
    - name: workflow-success
      script:
        image: ghcr.io/account/gitopsaccount/cd-promote:latest
        command: [ bash ]
        source: |
          echo "Success: {{workflow.name}} {{workflow.status}} {{workflow.duration}}"

    # This template is a default handler for failed builds
    - name: workflow-fail
      script:
        image: ghcr.io/account/gitopsaccount/cd-promote:latest
        command: [ bash ]
        source: |
          # Tip: {{workflow.failures}} is a JSON list. If you're using bash to read it, we recommend using jq to manipulate
          # it. For example:
          #
          # echo "{{workflow.failures}}" | jq -r '.[] | "Failed Step: \(.displayName)\tMessage: \(.message)"'
          #
          # Will print a list of all the failed steps and their messages. For more info look up the jq docs.
          echo "Failed: {{workflow.name}} {{workflow.status}} {{workflow.duration}}"
          echo '{{workflow.failures}}'

    # This template is a default handler for error builds
    - name: workflow-error
      script:
        image: ghcr.io/account/gitopsaccount/cd-promote:latest
        command: [ bash ]
        source: |
          # Tip: {{workflow.failures}} is a JSON list. If you're using bash to read it, we recommend using jq to manipulate
          # it. For example:
          #
          # echo "{{workflow.failures}}" | jq -r '.[] | "Failed Step: \(.displayName)\tMessage: \(.message)"'
          #
          # Will print a list of all the failed steps and their messages. For more info look up the jq docs.
          echo "Error: {{workflow.name}} {{workflow.status}} {{workflow.duration}}"
          echo '{{workflow.failures}}'
