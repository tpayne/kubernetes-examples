---
# Lets first create an application namespace to use...
apiVersion: v1
kind: Namespace
metadata:
  name: logicapp-prod
---
# Lets create a very simple secret...
apiVersion: v1
kind: Secret
metadata:
  name: dbname-secret
  namespace: logicapp-prod
type: kubernetes.io/basic-auth
stringData:
  username: system
  password: manager
---
apiVersion: v1
kind: Secret
metadata:
  name: ssh-random-key
  namespace: logicapp-prod
type: kubernetes.io/ssh-auth
stringData:
  ssh-privatekey: |
    b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAACFwAAAAdzc2gtcn
    NhAAAAAwEAAQAAAgEAwMZsJjq1e2W7jD48nP0Vu1dTrn1U+nBm0Vu/VOd/gadQwkAvQK1u
    oroOP21BuRJSjc4OCtDIberDn9tJLTpRJ+VtiEAFK0P0wF2ACB8oyoztoK8YYrA45UZjM+
    1jf3JO7lNT+3v0p4ItD90YhQcGmnJ0uWQQRElfMh7UqKUkwB2LZpeEyoUcZIv/oKf7iw5F
    rB26v8wiMn8a9rDdt18In8FdKkYM8YkLHsvQfzJOWTD/3ALNCPd7lwPj+qbBqTW3M94+gc
    cn0iU+Lx3forRgIsmASrtez2IPDaSmkHoqSyj9zi3uuHiobidG0DhAns+vwrbPJeuWzrdt
    +9Ni0GIOrFnh3LeOAT6ygYP9wHIozxnMBjSBVCfiQ79rDGA8C1a2A0j/9IA05YVopTkPWK
    8zqMgUdkJ1gcf7lpuxhMcKfp1kb9GVIeklQE3rUiYsJiT2RXBiGYI+S/O+ePJheiil/BfC
    yXue7afZijoVilordWbyHGFmqdHOo9A7NCvLv+qBK8LzXyVPIKY9rwf0Uro9bFqXVFHlV9
    qrJaytAypMgMrSS5TGBZb/qoPh3wzc68b3q6SaVnkayCMjsJUFEb5SogoIQZ7i8J24EP1y
    1lYFgJhhiXAdvUIdNf4k6JIq8OsCZQVypXQy+UzxT8PreMMaJelio2JqsL5eu/k5rGWvJu
    sAAAdQxnp2GMZ6dhgAAAAHc3NoLXJzYQAAAgEAwMZsJjq1e2W7jD48nP0Vu1dTrn1U+nBm
    0Vu/VOd/gadQwkAvQK1uoroOP21BuRJSjc4OCtDIberDn9tJLTpRJ+VtiEAFK0P0wF2ACB
    8oyoztoK8YYrA45UZjM+1jf3JO7lNT+3v0p4ItD90YhQcGmnJ0uWQQRElfMh7UqKUkwB2L
    ZpeEyoUcZIv/oKf7iw5FrB26v8wiMn8a9rDdt18In8FdKkYM8YkLHsvQfzJOWTD/3ALNCP
    d7lwPj+qbBqTW3M94+gccn0iU+Lx3forRgIsmASrtez2IPDaSmkHoqSyj9zi3uuHiobidG
    0DhAns+vwrbPJeuWzrdt+9Ni0GIOrFnh3LeOAT6ygYP9wHIozxnMBjSBVCfiQ79rDGA8C1
    a2A0j/9IA05YVopTkPWK8zqMgUdkJ1gcf7lpuxhMcKfp1kb9GVIeklQE3rUiYsJiT2RXBi
    GYI+S/O+ePJheiil/BfCyXue7afZijoVilordWbyHGFmqdHOo9A7NCvLv+qBK8LzXyVPIK
    Y9rwf0Uro9bFqXVFHlV9qrJaytAypMgMrSS5TGBZb/qoPh3wzc68b3q6SaVnkayCMjsJUF
    Eb5SogoIQZ7i8J24EP1y1lYFgJhhiXAdvUIdNf4k6JIq8OsCZQVypXQy+UzxT8PreMMaJe
    lio2JqsL5eu/k5rGWvJusAAAADAQABAAACAQC1wB4lKQMEFZVukxsYtDCyEZJvF/FvsVvv
    FX5d8Wkw92vXySYD58BAogRe3oaxk8nLsrNglRnzL/1CkT/76Vissc3EQP/em9J9L2pPvf
    j6h0ZfUdY+7YCnAeb0BWPivAYZAu1SVLsE12He7Ah7G3WpVjIgvGvtxfN/0LuVSSZOD0zn
    7AEh48AyOCBJ+zbZExqzPNBelnrDez0TywsvIOWDoY5SFfuMGjYm0eiAlBB0XRNN/kILqz
    GV3vAp2OELxP42Y9oxB3DO25g2WgcIYuGkyrAvRVsNUZl5tnvoCZYoiLxKkNnaiL/cIyHL
    nM2oLY27mhnR2b20phKG8/TdHSZQy42TQUnjX9Wu2/QA7JDVT3BIXdHMxhh5pUHCbzBNK+
    h8wwHvFz0po0wTt9FE7X0qvAlY57MULBD6gEG6IwPoidrJG1dJtBzmQpLOb3yGfNKGG7Wf
    4wKCn3IJHiqqhTNLJAWsWDSKgUrpz7aZ0zw2+tzc4DseypHh00aIWkc8iqszgJeLlf6c4Y
    1SSdiB9JSG7AHluRYLrKiXxCZHQTAzAmiuirkRrZ9nr458p6uDA//350XvXaZUdZSyfo+k
    0KJU3NcXrKuwRQpLcRfqwdPjYqGIt7dYubKp0n0EX9gVVhCpw2zC2adBEK4yDl6N6tqUf9
    EfQ7SxjwwM3hPUb4Ej4QAAAQAPu5yHaUPFwaRuR3+tCNJOMDP5Jvy0HwW633jq6v3rz4I1
    5IvN7q9XWglPdOETM1zy/KcqD2Fxu0Y/cwfB7V3IrMCnPjBBNcBEUq2pIuKAWD4/9x3n0D
    Gc+rOk+EMXU9Y8gOwgwvR3yCWsbr1+Om/SiW9GdqHx1hqQk4nKqzYlfnt7PjGwOWY6QVfq
    ahSPmpYixmZLGrOnwxggbXvwrhvMij28LifKdeXJ8No/MmNISN3jgIhvWVCKwzB9r+XXL2
    yHpEvQs5cpaRJnHvspY2z2hgPjvx14zZCQJqMDPf/OcqJgKGnPQijkv8BK8h231JJSu15S
    QhdwPcNu2K///u33AAABAQDo1np/SCXRa4+RUVtQBXLYu7b3sf5CTZVKblM4z5I6Yk7tNq
    CoC1eCWgTGPoyvpCU2Ga+tURyqUrX6LlNfRSdCBNuHDq1OyljDOV1rOedoVmRASPgNaZA2
    dg3LVkTjYVYJCZsbQx6l8MdJ6hb5oiiJCn3sSnA1opH70u9VRJgLZLI5yJ+YXZib4UGIMi
    bEMpPEg7ub8DTxBlsppmsrS1DndZbTOi4eO7BQrJJEwhDUujDGIrvY8aTalVieXaMhtrin
    vso8nsYaw62+dxACINMU2W7v8F20ZGjMuB6kgfNHXvzuUPXoRnSTEWrY1rGRXkEp6kqaUA
    /Kg4iT9litYBlxAAABAQDT87GsWKXLj+k8h4raraq7dBoQbIC3bN32l0rY8yLFY465c5Sy
    NL7vsG2t0njElS07DE0o3Il6wmakyNuuTakRmoHXWlB6MZAPzSBo+5vQosSHZBPV1A8+kQ
    yq5D5EEDMHyd0xNdNZo2i+ZHZMdnK32LrJrgz/gl2FGzQ7rQqSWjxXtMFXoPssXOaU1u8M
    ZH9Ib1wXuVkLPlAlPdt4H4KEKItTwk4+g0O1KCYUe5xy+cLHxZRJ0a8jrWeEB5FYvFJCId
    9YJKIHk/7m4vdc3EhtcNi/hoTqiwJtc4ncCqf1aDwvapysQrett7HKKVS8Akm9QU4Rd3Vp
    2JMKC38G1/gbAAAAFWFsZXhncmF5QFJoaWFubm9uLW1hYwECAwQF
---
# Config types for maps...
apiVersion: v1
kind: ConfigMap
metadata:
  name: configdemo-data
  namespace: logicapp-prod
data:
  # Key value pairs...
  key1: "value1"
  key2: "value2"

  # File properties...
  app.properties: |
    appkey.key1=value1
    appkey.key2=value2
    dbkey.key1=value1
  db.properties: |
    dbkey.key1=value1
    dbkey.key2=value2
    dbkey.connect=user/passwd@dbName
---
# Create a deployment which uses it...
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: logicapp-prod
  name: configdemo-app
spec:
  selector:
    matchLabels:
      app: configdemo-app-deployment
  template:
    metadata:
      labels:
        app: configdemo-app-deployment
        env: prod
    spec:
      containers:
        - name: configdemo
          image: busybox:glibc
          command: ["/bin/sh", "-c"]
          args:
            - while [ 1 = 1 ];
                echo ${KEY1};
                echo "${CONDBSECRET} - ${CONDBSECRET_PWD}";
                ls -laR /secrets;
                cat /secrets/dbdata/condb;
                ls -laR /config_data;
                cat /config_data/appDemo.properties;
                echo "Show file";
                echo ${APP_PROPERTIES};
                echo "Show SSH_KEY";
                echo ${SSH_KEY};
                do sleep 1;
              done
          imagePullPolicy: IfNotPresent
          env:
            # Single key
            - name: KEY1
              valueFrom:
                # Get key1 from the config defined...
                configMapKeyRef:
                  name: configdemo-data
                  key: key1
            - name: SSH_KEY
              valueFrom:
                secretKeyRef:
                  name: ssh-random-key
                  key: ssh-privatekey
            - name: CONDBSECRET
              valueFrom:
                secretKeyRef:
                  name: dbname-secret
                  key: username
            - name: CONDBSECRET_PWD
              valueFrom:
                secretKeyRef:
                  name: dbname-secret
                  key: password
            # File key
            - name: APP_PROPERTIES
              valueFrom:
                configMapKeyRef:
                  name: configdemo-data
                  key: app.properties
          volumeMounts:
            - name: configdata
              mountPath: "/config_data"
              readOnly: true
            - name: dbnamesecret
              mountPath: "/secrets"
              readOnly: true
      volumes:
      - name: dbnamesecret
        secret:
          secretName: dbname-secret
          items:
            - key: username
              path: dbdata/condb
      - name: configdata
        configMap:
          name: configdemo-data
          items:
            - key: "app.properties"
              path: "appDemo.properties"
            - key: "db.properties"
              path: "db.properties"